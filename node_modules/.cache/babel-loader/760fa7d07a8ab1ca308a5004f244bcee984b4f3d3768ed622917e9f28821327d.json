{"ast":null,"code":"var _jsxFileName = \"/Users/karthi/Desktop/Myna Kitchen/myna/src/components/PerformanceMonitor.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { performance as perfUtils } from '../lib/utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PerformanceMonitor = () => {\n  _s();\n  const [metrics, setMetrics] = useState({\n    fcp: null,\n    lcp: null,\n    fps: null,\n    memoryUsage: null\n  });\n  useEffect(() => {\n    // Only run in development\n    if (process.env.NODE_ENV !== 'development') return;\n\n    // Start performance monitoring\n    perfUtils.mark('app-start');\n\n    // Monitor Core Web Vitals\n    const measureWebVitals = () => {\n      // First Contentful Paint\n      if (window.performance && window.performance.getEntriesByType) {\n        const paintEntries = window.performance.getEntriesByType('paint');\n        const fcp = paintEntries.find(entry => entry.name === 'first-contentful-paint');\n        if (fcp) {\n          setMetrics(prev => ({\n            ...prev,\n            fcp: Math.round(fcp.startTime)\n          }));\n        }\n      }\n\n      // Largest Contentful Paint\n      if ('PerformanceObserver' in window) {\n        try {\n          const lcpObserver = new PerformanceObserver(list => {\n            const entries = list.getEntries();\n            const lcp = entries[entries.length - 1];\n            if (lcp) {\n              setMetrics(prev => ({\n                ...prev,\n                lcp: Math.round(lcp.startTime)\n              }));\n            }\n          });\n          lcpObserver.observe({\n            entryTypes: ['largest-contentful-paint']\n          });\n        } catch (error) {\n          console.warn('LCP monitoring not supported');\n        }\n      }\n    };\n\n    // Monitor Memory Usage\n    const monitorMemory = () => {\n      if ('memory' in window.performance) {\n        const memory = window.performance.memory;\n        setMetrics(prev => ({\n          ...prev,\n          memoryUsage: {\n            used: Math.round(memory.usedJSHeapSize / 1048576),\n            // MB\n            total: Math.round(memory.totalJSHeapSize / 1048576),\n            // MB\n            limit: Math.round(memory.jsHeapSizeLimit / 1048576) // MB\n          }\n        }));\n      }\n    };\n\n    // Monitor FPS\n    let frameCount = 0;\n    let lastTime = performance.now();\n    const measureFPS = () => {\n      frameCount++;\n      const currentTime = performance.now();\n      if (currentTime >= lastTime + 1000) {\n        const fps = Math.round(frameCount * 1000 / (currentTime - lastTime));\n        setMetrics(prev => ({\n          ...prev,\n          fps\n        }));\n        frameCount = 0;\n        lastTime = currentTime;\n      }\n      requestAnimationFrame(measureFPS);\n    };\n\n    // Start measurements\n    setTimeout(measureWebVitals, 100);\n    setTimeout(monitorMemory, 1000);\n    requestAnimationFrame(measureFPS);\n\n    // Update memory usage every 5 seconds\n    const memoryInterval = setInterval(monitorMemory, 5000);\n    return () => {\n      clearInterval(memoryInterval);\n    };\n  }, []);\n\n  // Don't render in production\n  if (process.env.NODE_ENV !== 'development') return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'fixed',\n      top: '10px',\n      right: '10px',\n      background: 'rgba(0, 0, 0, 0.8)',\n      color: 'white',\n      padding: '10px',\n      borderRadius: '8px',\n      fontSize: '12px',\n      fontFamily: 'monospace',\n      zIndex: 9999,\n      minWidth: '200px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      style: {\n        margin: '0 0 8px 0',\n        fontSize: '14px'\n      },\n      children: \"Performance Monitor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '4px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"FCP:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), \" \", metrics.fcp ? `${metrics.fcp}ms` : 'Measuring...', /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: metrics.fcp < 1800 ? '#4ade80' : metrics.fcp < 3000 ? '#fbbf24' : '#f87171',\n          marginLeft: '8px'\n        },\n        children: metrics.fcp < 1800 ? '✓' : metrics.fcp < 3000 ? '⚠' : '✗'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '4px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"LCP:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), \" \", metrics.lcp ? `${metrics.lcp}ms` : 'Measuring...', /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: metrics.lcp < 2500 ? '#4ade80' : metrics.lcp < 4000 ? '#fbbf24' : '#f87171',\n          marginLeft: '8px'\n        },\n        children: metrics.lcp < 2500 ? '✓' : metrics.lcp < 4000 ? '⚠' : '✗'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '4px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"FPS:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), \" \", metrics.fps || 'Measuring...', /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: metrics.fps >= 55 ? '#4ade80' : metrics.fps >= 45 ? '#fbbf24' : '#f87171',\n          marginLeft: '8px'\n        },\n        children: metrics.fps >= 55 ? '✓' : metrics.fps >= 45 ? '⚠' : '✗'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), metrics.memoryUsage && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '4px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Memory:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this), \" \", metrics.memoryUsage.used, \"MB / \", metrics.memoryUsage.total, \"MB\", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: metrics.memoryUsage.used < 50 ? '#4ade80' : metrics.memoryUsage.used < 100 ? '#fbbf24' : '#f87171',\n          marginLeft: '8px'\n        },\n        children: metrics.memoryUsage.used < 50 ? '✓' : metrics.memoryUsage.used < 100 ? '⚠' : '✗'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: '10px',\n        marginTop: '8px',\n        opacity: 0.7\n      },\n      children: \"Green = Good, Yellow = Fair, Red = Poor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(PerformanceMonitor, \"QzMBjUvqr5PfEuI0vxrrjj5qpRA=\");\n_c = PerformanceMonitor;\nexport default PerformanceMonitor;\nvar _c;\n$RefreshReg$(_c, \"PerformanceMonitor\");","map":{"version":3,"names":["React","useEffect","useState","performance","perfUtils","jsxDEV","_jsxDEV","PerformanceMonitor","_s","metrics","setMetrics","fcp","lcp","fps","memoryUsage","process","env","NODE_ENV","mark","measureWebVitals","window","getEntriesByType","paintEntries","find","entry","name","prev","Math","round","startTime","lcpObserver","PerformanceObserver","list","entries","getEntries","length","observe","entryTypes","error","console","warn","monitorMemory","memory","used","usedJSHeapSize","total","totalJSHeapSize","limit","jsHeapSizeLimit","frameCount","lastTime","now","measureFPS","currentTime","requestAnimationFrame","setTimeout","memoryInterval","setInterval","clearInterval","style","position","top","right","background","color","padding","borderRadius","fontSize","fontFamily","zIndex","minWidth","children","margin","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","marginLeft","marginTop","opacity","_c","$RefreshReg$"],"sources":["/Users/karthi/Desktop/Myna Kitchen/myna/src/components/PerformanceMonitor.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { performance as perfUtils } from '../lib/utils';\n\nconst PerformanceMonitor = () => {\n  const [metrics, setMetrics] = useState({\n    fcp: null,\n    lcp: null,\n    fps: null,\n    memoryUsage: null\n  });\n\n  useEffect(() => {\n    // Only run in development\n    if (process.env.NODE_ENV !== 'development') return;\n\n    // Start performance monitoring\n    perfUtils.mark('app-start');\n\n    // Monitor Core Web Vitals\n    const measureWebVitals = () => {\n      // First Contentful Paint\n      if (window.performance && window.performance.getEntriesByType) {\n        const paintEntries = window.performance.getEntriesByType('paint');\n        const fcp = paintEntries.find(entry => entry.name === 'first-contentful-paint');\n        if (fcp) {\n          setMetrics(prev => ({ ...prev, fcp: Math.round(fcp.startTime) }));\n        }\n      }\n\n      // Largest Contentful Paint\n      if ('PerformanceObserver' in window) {\n        try {\n          const lcpObserver = new PerformanceObserver((list) => {\n            const entries = list.getEntries();\n            const lcp = entries[entries.length - 1];\n            if (lcp) {\n              setMetrics(prev => ({ ...prev, lcp: Math.round(lcp.startTime) }));\n            }\n          });\n          lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\n        } catch (error) {\n          console.warn('LCP monitoring not supported');\n        }\n      }\n    };\n\n    // Monitor Memory Usage\n    const monitorMemory = () => {\n      if ('memory' in window.performance) {\n        const memory = window.performance.memory;\n        setMetrics(prev => ({\n          ...prev,\n          memoryUsage: {\n            used: Math.round(memory.usedJSHeapSize / 1048576), // MB\n            total: Math.round(memory.totalJSHeapSize / 1048576), // MB\n            limit: Math.round(memory.jsHeapSizeLimit / 1048576) // MB\n          }\n        }));\n      }\n    };\n\n    // Monitor FPS\n    let frameCount = 0;\n    let lastTime = performance.now();\n    \n    const measureFPS = () => {\n      frameCount++;\n      const currentTime = performance.now();\n      \n      if (currentTime >= lastTime + 1000) {\n        const fps = Math.round((frameCount * 1000) / (currentTime - lastTime));\n        setMetrics(prev => ({ ...prev, fps }));\n        frameCount = 0;\n        lastTime = currentTime;\n      }\n      \n      requestAnimationFrame(measureFPS);\n    };\n\n    // Start measurements\n    setTimeout(measureWebVitals, 100);\n    setTimeout(monitorMemory, 1000);\n    requestAnimationFrame(measureFPS);\n\n    // Update memory usage every 5 seconds\n    const memoryInterval = setInterval(monitorMemory, 5000);\n\n    return () => {\n      clearInterval(memoryInterval);\n    };\n  }, []);\n\n  // Don't render in production\n  if (process.env.NODE_ENV !== 'development') return null;\n\n  return (\n    <div style={{\n      position: 'fixed',\n      top: '10px',\n      right: '10px',\n      background: 'rgba(0, 0, 0, 0.8)',\n      color: 'white',\n      padding: '10px',\n      borderRadius: '8px',\n      fontSize: '12px',\n      fontFamily: 'monospace',\n      zIndex: 9999,\n      minWidth: '200px'\n    }}>\n      <h4 style={{ margin: '0 0 8px 0', fontSize: '14px' }}>Performance Monitor</h4>\n      \n      <div style={{ marginBottom: '4px' }}>\n        <strong>FCP:</strong> {metrics.fcp ? `${metrics.fcp}ms` : 'Measuring...'}\n        <span style={{ \n          color: metrics.fcp < 1800 ? '#4ade80' : metrics.fcp < 3000 ? '#fbbf24' : '#f87171',\n          marginLeft: '8px'\n        }}>\n          {metrics.fcp < 1800 ? '✓' : metrics.fcp < 3000 ? '⚠' : '✗'}\n        </span>\n      </div>\n      \n      <div style={{ marginBottom: '4px' }}>\n        <strong>LCP:</strong> {metrics.lcp ? `${metrics.lcp}ms` : 'Measuring...'}\n        <span style={{ \n          color: metrics.lcp < 2500 ? '#4ade80' : metrics.lcp < 4000 ? '#fbbf24' : '#f87171',\n          marginLeft: '8px'\n        }}>\n          {metrics.lcp < 2500 ? '✓' : metrics.lcp < 4000 ? '⚠' : '✗'}\n        </span>\n      </div>\n      \n      <div style={{ marginBottom: '4px' }}>\n        <strong>FPS:</strong> {metrics.fps || 'Measuring...'}\n        <span style={{ \n          color: metrics.fps >= 55 ? '#4ade80' : metrics.fps >= 45 ? '#fbbf24' : '#f87171',\n          marginLeft: '8px'\n        }}>\n          {metrics.fps >= 55 ? '✓' : metrics.fps >= 45 ? '⚠' : '✗'}\n        </span>\n      </div>\n      \n      {metrics.memoryUsage && (\n        <div style={{ marginBottom: '4px' }}>\n          <strong>Memory:</strong> {metrics.memoryUsage.used}MB / {metrics.memoryUsage.total}MB\n          <span style={{ \n            color: metrics.memoryUsage.used < 50 ? '#4ade80' : metrics.memoryUsage.used < 100 ? '#fbbf24' : '#f87171',\n            marginLeft: '8px'\n          }}>\n            {metrics.memoryUsage.used < 50 ? '✓' : metrics.memoryUsage.used < 100 ? '⚠' : '✗'}\n          </span>\n        </div>\n      )}\n      \n      <div style={{ fontSize: '10px', marginTop: '8px', opacity: 0.7 }}>\n        Green = Good, Yellow = Fair, Red = Poor\n      </div>\n    </div>\n  );\n};\n\nexport default PerformanceMonitor; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}