{"ast":null,"code":"import{clsx}from'clsx';import{twMerge}from'tailwind-merge';/**\n * Combines multiple class name utilities and resolves Tailwind CSS conflicts\n * @param  {...any} inputs - CSS class names or conditional class name objects\n * @returns {string} - Merged class string with conflicts resolved\n */export function cn(){for(var _len=arguments.length,inputs=new Array(_len),_key=0;_key<_len;_key++){inputs[_key]=arguments[_key];}return twMerge(clsx(inputs));}/**\n * Format price as currency string\n * @param {number} amount - Amount to format\n * @param {string} currency - Currency code (default: 'INR')\n * @returns {string} - Formatted price string\n */export function formatPrice(amount){let currency=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'INR';return new Intl.NumberFormat('en-IN',{style:'currency',currency}).format(amount);}/**\n * Adds an intersection observer to animate elements as they enter viewport\n * @param {function} callback - Function to call when element is observed\n * @param {Object} options - IntersectionObserver options\n * @returns {IntersectionObserver} - The created observer instance\n */export function createScrollObserver(callback){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const defaultOptions={root:null,rootMargin:'0px',threshold:0.1};const mergedOptions={...defaultOptions,...options};return new IntersectionObserver(callback,mergedOptions);}","map":{"version":3,"names":["clsx","twMerge","cn","_len","arguments","length","inputs","Array","_key","formatPrice","amount","currency","undefined","Intl","NumberFormat","style","format","createScrollObserver","callback","options","defaultOptions","root","rootMargin","threshold","mergedOptions","IntersectionObserver"],"sources":["/Users/karthi/Desktop/Myna Kitchen/myna/src/lib/utils.js"],"sourcesContent":["import { clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Combines multiple class name utilities and resolves Tailwind CSS conflicts\n * @param  {...any} inputs - CSS class names or conditional class name objects\n * @returns {string} - Merged class string with conflicts resolved\n */\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Format price as currency string\n * @param {number} amount - Amount to format\n * @param {string} currency - Currency code (default: 'INR')\n * @returns {string} - Formatted price string\n */\nexport function formatPrice(amount, currency = 'INR') {\n  return new Intl.NumberFormat('en-IN', {\n    style: 'currency',\n    currency,\n  }).format(amount);\n}\n\n/**\n * Adds an intersection observer to animate elements as they enter viewport\n * @param {function} callback - Function to call when element is observed\n * @param {Object} options - IntersectionObserver options\n * @returns {IntersectionObserver} - The created observer instance\n */\nexport function createScrollObserver(callback, options = {}) {\n  const defaultOptions = {\n    root: null,\n    rootMargin: '0px',\n    threshold: 0.1,\n  };\n  \n  const mergedOptions = { ...defaultOptions, ...options };\n  \n  return new IntersectionObserver(callback, mergedOptions);\n} "],"mappings":"AAAA,OAASA,IAAI,KAAQ,MAAM,CAC3B,OAASC,OAAO,KAAQ,gBAAgB,CAExC;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAC,EAAEA,CAAA,CAAY,SAAAC,IAAA,CAAAC,SAAA,CAAAC,MAAA,CAARC,MAAM,KAAAC,KAAA,CAAAJ,IAAA,EAAAK,IAAA,GAAAA,IAAA,CAAAL,IAAA,CAAAK,IAAA,IAANF,MAAM,CAAAE,IAAA,EAAAJ,SAAA,CAAAI,IAAA,GAC1B,MAAO,CAAAP,OAAO,CAACD,IAAI,CAACM,MAAM,CAAC,CAAC,CAC9B,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAG,WAAWA,CAACC,MAAM,CAAoB,IAAlB,CAAAC,QAAQ,CAAAP,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAQ,SAAA,CAAAR,SAAA,IAAG,KAAK,CAClD,MAAO,IAAI,CAAAS,IAAI,CAACC,YAAY,CAAC,OAAO,CAAE,CACpCC,KAAK,CAAE,UAAU,CACjBJ,QACF,CAAC,CAAC,CAACK,MAAM,CAACN,MAAM,CAAC,CACnB,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAO,oBAAoBA,CAACC,QAAQ,CAAgB,IAAd,CAAAC,OAAO,CAAAf,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAQ,SAAA,CAAAR,SAAA,IAAG,CAAC,CAAC,CACzD,KAAM,CAAAgB,cAAc,CAAG,CACrBC,IAAI,CAAE,IAAI,CACVC,UAAU,CAAE,KAAK,CACjBC,SAAS,CAAE,GACb,CAAC,CAED,KAAM,CAAAC,aAAa,CAAG,CAAE,GAAGJ,cAAc,CAAE,GAAGD,OAAQ,CAAC,CAEvD,MAAO,IAAI,CAAAM,oBAAoB,CAACP,QAAQ,CAAEM,aAAa,CAAC,CAC1D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}