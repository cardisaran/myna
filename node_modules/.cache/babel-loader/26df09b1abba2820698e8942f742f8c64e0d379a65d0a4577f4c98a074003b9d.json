{"ast":null,"code":"import { clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Combines multiple class name utilities and resolves Tailwind CSS conflicts\n * @param  {...any} inputs - CSS class names or conditional class name objects\n * @returns {string} - Merged class string with conflicts resolved\n */\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Format price with proper currency display\n * @param {number} price - Price in rupees\n * @returns {string} Formatted price string\n */\nexport const formatPrice = price => {\n  if (typeof price !== 'number' || price < 0) {\n    return '₹0';\n  }\n  return `₹${price}`;\n};\n\n/**\n * Secure external link handler\n * Prevents tabnabbing attacks and adds proper security measures\n * @param {string} url - The URL to open\n * @param {Object} options - Additional options\n * @param {boolean} options.newTab - Whether to open in new tab (default: true)\n * @param {Function} options.onError - Error callback function\n */\nexport const openSecureLink = (url, options = {}) => {\n  const {\n    newTab = true,\n    onError\n  } = options;\n  try {\n    // Validate URL\n    if (!url || typeof url !== 'string') {\n      throw new Error('Invalid URL provided');\n    }\n\n    // Ensure HTTPS for external links\n    const secureUrl = url.startsWith('http://') && !url.includes('localhost') ? url.replace('http://', 'https://') : url;\n    if (newTab) {\n      // Secure external link opening\n      const newWindow = window.open(secureUrl, '_blank', 'noopener,noreferrer,nofollow');\n      if (newWindow) {\n        // Extra security measure - nullify opener reference\n        newWindow.opener = null;\n      } else {\n        // Popup blocked or failed - fallback\n        console.warn('Popup blocked, redirecting in current window');\n        window.location.href = secureUrl;\n      }\n    } else {\n      // Navigate in current window\n      window.location.href = secureUrl;\n    }\n  } catch (error) {\n    console.error('Error opening secure link:', error);\n    if (onError && typeof onError === 'function') {\n      onError(error);\n    } else {\n      // Fallback: try basic navigation\n      try {\n        window.location.href = url;\n      } catch (fallbackError) {\n        console.error('Fallback navigation failed:', fallbackError);\n      }\n    }\n  }\n};\n\n/**\n * Enhanced scroll observer with better error handling and performance\n * @param {Function} callback - Callback function for intersection changes\n * @param {Object} options - Intersection observer options\n * @returns {IntersectionObserver|null} The observer instance or null if not supported\n */\nexport const createScrollObserver = (callback, options = {}) => {\n  try {\n    // Check for IntersectionObserver support\n    if (!window.IntersectionObserver) {\n      console.warn('IntersectionObserver not supported, skipping scroll animations');\n      return null;\n    }\n\n    // Default options with performance optimizations\n    const defaultOptions = {\n      threshold: 0.1,\n      rootMargin: '10px',\n      ...options\n    };\n\n    // Enhanced callback with error handling\n    const safeCallback = (entries, observer) => {\n      try {\n        callback(entries, observer);\n      } catch (error) {\n        console.error('Intersection observer callback error:', error);\n      }\n    };\n    return new IntersectionObserver(safeCallback, defaultOptions);\n  } catch (error) {\n    console.error('Failed to create intersection observer:', error);\n    return null;\n  }\n};\n\n/**\n * Throttle function for performance optimization\n * @param {Function} func - Function to throttle\n * @param {number} delay - Delay in milliseconds\n * @returns {Function} Throttled function\n */\nexport const throttle = (func, delay) => {\n  let timeoutId;\n  let lastExecTime = 0;\n  return function (...args) {\n    const currentTime = Date.now();\n    if (currentTime - lastExecTime > delay) {\n      func.apply(this, args);\n      lastExecTime = currentTime;\n    } else {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => {\n        func.apply(this, args);\n        lastExecTime = Date.now();\n      }, delay - (currentTime - lastExecTime));\n    }\n  };\n};\n\n/**\n * Debounce function for performance optimization\n * @param {Function} func - Function to debounce\n * @param {number} delay - Delay in milliseconds\n * @returns {Function} Debounced function\n */\nexport const debounce = (func, delay) => {\n  let timeoutId;\n  return function (...args) {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => func.apply(this, args), delay);\n  };\n};\n\n/**\n * Safe DOM query selector with error handling\n * @param {string} selector - CSS selector\n * @param {Element} context - Context element (default: document)\n * @returns {Element|null} Found element or null\n */\nexport const safeQuerySelector = (selector, context = document) => {\n  try {\n    return context.querySelector(selector);\n  } catch (error) {\n    console.error('Invalid selector:', selector, error);\n    return null;\n  }\n};\n\n/**\n * Safe DOM query selector all with error handling\n * @param {string} selector - CSS selector\n * @param {Element} context - Context element (default: document)\n * @returns {NodeList|Array} Found elements or empty array\n */\nexport const safeQuerySelectorAll = (selector, context = document) => {\n  try {\n    return context.querySelectorAll(selector);\n  } catch (error) {\n    console.error('Invalid selector:', selector, error);\n    return [];\n  }\n};\n\n/**\n * Image lazy loading with error handling\n * @param {HTMLImageElement} img - Image element\n * @param {string} src - Image source\n * @param {string} fallbackSrc - Fallback image source\n */\nexport const loadImageSafely = (img, src, fallbackSrc = '/images/placeholder.jpg') => {\n  if (!img || !src) return;\n\n  // Set up error handler before changing src\n  const handleError = () => {\n    if (img.src !== fallbackSrc) {\n      console.warn(`Image failed to load: ${src}, using fallback`);\n      img.src = fallbackSrc;\n    }\n  };\n  const handleLoad = () => {\n    img.classList.add('loaded');\n  };\n  img.addEventListener('error', handleError, {\n    once: true\n  });\n  img.addEventListener('load', handleLoad, {\n    once: true\n  });\n  img.src = src;\n};\n\n/**\n * Validate and sanitize text input\n * @param {string} text - Input text\n * @param {number} maxLength - Maximum allowed length\n * @returns {string} Sanitized text\n */\nexport const sanitizeText = (text, maxLength = 1000) => {\n  if (typeof text !== 'string') return '';\n  return text.trim().slice(0, maxLength).replace(/[<>\\\"'&]/g, match => {\n    const map = {\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#x27;',\n      '&': '&amp;'\n    };\n    return map[match];\n  });\n};\n\n/**\n * Validates and sanitizes image sources to prevent XSS\n * @param {string} imageSrc - The image source URL\n * @returns {string|null} - Sanitized URL or null if invalid\n */\nexport function sanitizeImageSrc(imageSrc) {\n  if (!imageSrc || typeof imageSrc !== 'string') {\n    return null;\n  }\n\n  // Basic whitelist for allowed protocols\n  const allowedProtocols = ['http:', 'https:', 'data:'];\n  try {\n    const url = new URL(imageSrc, window.location.origin);\n    if (allowedProtocols.includes(url.protocol)) {\n      return url.href;\n    } else {\n      console.warn('Disallowed protocol in image URL:', imageSrc);\n      return null;\n    }\n  } catch (error) {\n    // If URL parsing fails, it might be a relative URL\n    if (imageSrc.startsWith('/') || imageSrc.startsWith('./') || imageSrc.startsWith('../')) {\n      return imageSrc; // Allow relative URLs\n    }\n    console.warn('Invalid image URL:', imageSrc);\n    return null;\n  }\n}","map":{"version":3,"names":["clsx","twMerge","cn","inputs","formatPrice","price","openSecureLink","url","options","newTab","onError","Error","secureUrl","startsWith","includes","replace","newWindow","window","open","opener","console","warn","location","href","error","fallbackError","createScrollObserver","callback","IntersectionObserver","defaultOptions","threshold","rootMargin","safeCallback","entries","observer","throttle","func","delay","timeoutId","lastExecTime","args","currentTime","Date","now","apply","clearTimeout","setTimeout","debounce","safeQuerySelector","selector","context","document","querySelector","safeQuerySelectorAll","querySelectorAll","loadImageSafely","img","src","fallbackSrc","handleError","handleLoad","classList","add","addEventListener","once","sanitizeText","text","maxLength","trim","slice","match","map","sanitizeImageSrc","imageSrc","allowedProtocols","URL","origin","protocol"],"sources":["/Users/karthi/Desktop/Myna Kitchen/myna/src/lib/utils.js"],"sourcesContent":["import { clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Combines multiple class name utilities and resolves Tailwind CSS conflicts\n * @param  {...any} inputs - CSS class names or conditional class name objects\n * @returns {string} - Merged class string with conflicts resolved\n */\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Format price with proper currency display\n * @param {number} price - Price in rupees\n * @returns {string} Formatted price string\n */\nexport const formatPrice = (price) => {\n  if (typeof price !== 'number' || price < 0) {\n    return '₹0';\n  }\n  return `₹${price}`;\n};\n\n/**\n * Secure external link handler\n * Prevents tabnabbing attacks and adds proper security measures\n * @param {string} url - The URL to open\n * @param {Object} options - Additional options\n * @param {boolean} options.newTab - Whether to open in new tab (default: true)\n * @param {Function} options.onError - Error callback function\n */\nexport const openSecureLink = (url, options = {}) => {\n  const { newTab = true, onError } = options;\n  \n  try {\n    // Validate URL\n    if (!url || typeof url !== 'string') {\n      throw new Error('Invalid URL provided');\n    }\n    \n    // Ensure HTTPS for external links\n    const secureUrl = url.startsWith('http://') && !url.includes('localhost') \n      ? url.replace('http://', 'https://') \n      : url;\n    \n    if (newTab) {\n      // Secure external link opening\n      const newWindow = window.open(\n        secureUrl, \n        '_blank', \n        'noopener,noreferrer,nofollow'\n      );\n      \n      if (newWindow) {\n        // Extra security measure - nullify opener reference\n        newWindow.opener = null;\n      } else {\n        // Popup blocked or failed - fallback\n        console.warn('Popup blocked, redirecting in current window');\n        window.location.href = secureUrl;\n      }\n    } else {\n      // Navigate in current window\n      window.location.href = secureUrl;\n    }\n  } catch (error) {\n    console.error('Error opening secure link:', error);\n    if (onError && typeof onError === 'function') {\n      onError(error);\n    } else {\n      // Fallback: try basic navigation\n      try {\n        window.location.href = url;\n      } catch (fallbackError) {\n        console.error('Fallback navigation failed:', fallbackError);\n      }\n    }\n  }\n};\n\n/**\n * Enhanced scroll observer with better error handling and performance\n * @param {Function} callback - Callback function for intersection changes\n * @param {Object} options - Intersection observer options\n * @returns {IntersectionObserver|null} The observer instance or null if not supported\n */\nexport const createScrollObserver = (callback, options = {}) => {\n  try {\n    // Check for IntersectionObserver support\n    if (!window.IntersectionObserver) {\n      console.warn('IntersectionObserver not supported, skipping scroll animations');\n      return null;\n    }\n\n    // Default options with performance optimizations\n    const defaultOptions = {\n      threshold: 0.1,\n      rootMargin: '10px',\n      ...options\n    };\n\n    // Enhanced callback with error handling\n    const safeCallback = (entries, observer) => {\n      try {\n        callback(entries, observer);\n      } catch (error) {\n        console.error('Intersection observer callback error:', error);\n      }\n    };\n\n    return new IntersectionObserver(safeCallback, defaultOptions);\n  } catch (error) {\n    console.error('Failed to create intersection observer:', error);\n    return null;\n  }\n};\n\n/**\n * Throttle function for performance optimization\n * @param {Function} func - Function to throttle\n * @param {number} delay - Delay in milliseconds\n * @returns {Function} Throttled function\n */\nexport const throttle = (func, delay) => {\n  let timeoutId;\n  let lastExecTime = 0;\n  \n  return function (...args) {\n    const currentTime = Date.now();\n    \n    if (currentTime - lastExecTime > delay) {\n      func.apply(this, args);\n      lastExecTime = currentTime;\n    } else {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => {\n        func.apply(this, args);\n        lastExecTime = Date.now();\n      }, delay - (currentTime - lastExecTime));\n    }\n  };\n};\n\n/**\n * Debounce function for performance optimization\n * @param {Function} func - Function to debounce\n * @param {number} delay - Delay in milliseconds\n * @returns {Function} Debounced function\n */\nexport const debounce = (func, delay) => {\n  let timeoutId;\n  \n  return function (...args) {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => func.apply(this, args), delay);\n  };\n};\n\n/**\n * Safe DOM query selector with error handling\n * @param {string} selector - CSS selector\n * @param {Element} context - Context element (default: document)\n * @returns {Element|null} Found element or null\n */\nexport const safeQuerySelector = (selector, context = document) => {\n  try {\n    return context.querySelector(selector);\n  } catch (error) {\n    console.error('Invalid selector:', selector, error);\n    return null;\n  }\n};\n\n/**\n * Safe DOM query selector all with error handling\n * @param {string} selector - CSS selector\n * @param {Element} context - Context element (default: document)\n * @returns {NodeList|Array} Found elements or empty array\n */\nexport const safeQuerySelectorAll = (selector, context = document) => {\n  try {\n    return context.querySelectorAll(selector);\n  } catch (error) {\n    console.error('Invalid selector:', selector, error);\n    return [];\n  }\n};\n\n/**\n * Image lazy loading with error handling\n * @param {HTMLImageElement} img - Image element\n * @param {string} src - Image source\n * @param {string} fallbackSrc - Fallback image source\n */\nexport const loadImageSafely = (img, src, fallbackSrc = '/images/placeholder.jpg') => {\n  if (!img || !src) return;\n  \n  // Set up error handler before changing src\n  const handleError = () => {\n    if (img.src !== fallbackSrc) {\n      console.warn(`Image failed to load: ${src}, using fallback`);\n      img.src = fallbackSrc;\n    }\n  };\n  \n  const handleLoad = () => {\n    img.classList.add('loaded');\n  };\n  \n  img.addEventListener('error', handleError, { once: true });\n  img.addEventListener('load', handleLoad, { once: true });\n  img.src = src;\n};\n\n/**\n * Validate and sanitize text input\n * @param {string} text - Input text\n * @param {number} maxLength - Maximum allowed length\n * @returns {string} Sanitized text\n */\nexport const sanitizeText = (text, maxLength = 1000) => {\n  if (typeof text !== 'string') return '';\n  \n  return text\n    .trim()\n    .slice(0, maxLength)\n    .replace(/[<>\\\"'&]/g, (match) => {\n      const map = {\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#x27;',\n        '&': '&amp;'\n      };\n      return map[match];\n    });\n};\n\n/**\n * Validates and sanitizes image sources to prevent XSS\n * @param {string} imageSrc - The image source URL\n * @returns {string|null} - Sanitized URL or null if invalid\n */\nexport function sanitizeImageSrc(imageSrc) {\n  if (!imageSrc || typeof imageSrc !== 'string') {\n    return null;\n  }\n\n  // Basic whitelist for allowed protocols\n  const allowedProtocols = ['http:', 'https:', 'data:'];\n  \n  try {\n    const url = new URL(imageSrc, window.location.origin);\n    \n    if (allowedProtocols.includes(url.protocol)) {\n      return url.href;\n    } else {\n      console.warn('Disallowed protocol in image URL:', imageSrc);\n      return null;\n    }\n  } catch (error) {\n    // If URL parsing fails, it might be a relative URL\n    if (imageSrc.startsWith('/') || imageSrc.startsWith('./') || imageSrc.startsWith('../')) {\n      return imageSrc; // Allow relative URLs\n    }\n    \n    console.warn('Invalid image URL:', imageSrc);\n    return null;\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}