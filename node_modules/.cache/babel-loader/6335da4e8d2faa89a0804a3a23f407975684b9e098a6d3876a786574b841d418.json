{"ast":null,"code":"import { clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Combines multiple class name utilities and resolves Tailwind CSS conflicts\n * @param  {...any} inputs - CSS class names or conditional class name objects\n * @returns {string} - Merged class string with conflicts resolved\n */\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Format price as currency string\n * @param {number} amount - Amount to format\n * @param {string} currency - Currency code (default: 'INR')\n * @returns {string} - Formatted price string\n */\nexport function formatPrice(amount, currency = 'INR') {\n  return new Intl.NumberFormat('en-IN', {\n    style: 'currency',\n    currency\n  }).format(amount);\n}\n\n/**\n * Adds an intersection observer to animate elements as they enter viewport\n * @param {function} callback - Function to call when element is observed\n * @param {Object} options - IntersectionObserver options\n * @returns {IntersectionObserver} - The created observer instance\n */\nexport function createScrollObserver(callback, options = {}) {\n  const defaultOptions = {\n    root: null,\n    rootMargin: '0px',\n    threshold: 0.1,\n    ...options\n  };\n  return new IntersectionObserver(callback, defaultOptions);\n}","map":{"version":3,"names":["clsx","twMerge","cn","inputs","formatPrice","amount","currency","Intl","NumberFormat","style","format","createScrollObserver","callback","options","defaultOptions","root","rootMargin","threshold","IntersectionObserver"],"sources":["/Users/karthi/Desktop/Myna Kitchen/myna/src/lib/utils.js"],"sourcesContent":["import { clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Combines multiple class name utilities and resolves Tailwind CSS conflicts\n * @param  {...any} inputs - CSS class names or conditional class name objects\n * @returns {string} - Merged class string with conflicts resolved\n */\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Format price as currency string\n * @param {number} amount - Amount to format\n * @param {string} currency - Currency code (default: 'INR')\n * @returns {string} - Formatted price string\n */\nexport function formatPrice(amount, currency = 'INR') {\n  return new Intl.NumberFormat('en-IN', {\n    style: 'currency',\n    currency,\n  }).format(amount);\n}\n\n/**\n * Adds an intersection observer to animate elements as they enter viewport\n * @param {function} callback - Function to call when element is observed\n * @param {Object} options - IntersectionObserver options\n * @returns {IntersectionObserver} - The created observer instance\n */\nexport function createScrollObserver(callback, options = {}) {\n  const defaultOptions = {\n    root: null,\n    rootMargin: '0px',\n    threshold: 0.1,\n    ...options\n  };\n  \n  return new IntersectionObserver(callback, defaultOptions);\n} "],"mappings":"AAAA,SAASA,IAAI,QAAQ,MAAM;AAC3B,SAASC,OAAO,QAAQ,gBAAgB;;AAExC;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,EAAEA,CAAC,GAAGC,MAAM,EAAE;EAC5B,OAAOF,OAAO,CAACD,IAAI,CAACG,MAAM,CAAC,CAAC;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,MAAM,EAAEC,QAAQ,GAAG,KAAK,EAAE;EACpD,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;IACpCC,KAAK,EAAE,UAAU;IACjBH;EACF,CAAC,CAAC,CAACI,MAAM,CAACL,MAAM,CAAC;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASM,oBAAoBA,CAACC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC3D,MAAMC,cAAc,GAAG;IACrBC,IAAI,EAAE,IAAI;IACVC,UAAU,EAAE,KAAK;IACjBC,SAAS,EAAE,GAAG;IACd,GAAGJ;EACL,CAAC;EAED,OAAO,IAAIK,oBAAoB,CAACN,QAAQ,EAAEE,cAAc,CAAC;AAC3D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}