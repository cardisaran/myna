{"ast":null,"code":"import { clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Combines multiple class name utilities and resolves Tailwind CSS conflicts\n * @param  {...any} inputs - CSS class names or conditional class name objects\n * @returns {string} - Merged class string with conflicts resolved\n */\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Format price as currency string\n * @param {number} amount - Amount to format\n * @param {string} currency - Currency code (default: 'INR')\n * @returns {string} - Formatted price string\n */\nexport function formatPrice(amount, currency = 'INR') {\n  return new Intl.NumberFormat('en-IN', {\n    style: 'currency',\n    currency\n  }).format(amount);\n}\n\n/**\n * Adds an intersection observer to animate elements as they enter viewport\n * @param {function} callback - Function to call when element is observed\n * @param {Object} options - IntersectionObserver options\n * @returns {IntersectionObserver} - The created observer instance\n */\nexport function createScrollObserver(callback, options = {}) {\n  const defaultOptions = {\n    root: null,\n    rootMargin: '0px',\n    threshold: 0.1\n  };\n  const mergedOptions = {\n    ...defaultOptions,\n    ...options\n  };\n  return new IntersectionObserver(callback, mergedOptions);\n}\n\n/**\n * Safely opens external links with proper security measures\n * Prevents tabnabbing attacks and handles errors gracefully\n * @param {string} url - The URL to open\n * @param {Object} options - Additional options\n * @param {boolean} options.fallbackToCurrentWindow - Whether to fallback to current window on error\n * @returns {Window|null} - The opened window reference or null\n */\nexport function openExternalLink(url, options = {}) {\n  const {\n    fallbackToCurrentWindow = true\n  } = options;\n  try {\n    // Validate URL\n    if (!url || typeof url !== 'string') {\n      console.error('Invalid URL provided to openExternalLink:', url);\n      return null;\n    }\n\n    // Open with security attributes\n    const newWindow = window.open(url, '_blank', 'noopener,noreferrer');\n    if (newWindow) {\n      // Extra security measure\n      newWindow.opener = null;\n      return newWindow;\n    } else {\n      // Window was blocked or failed to open\n      console.warn('Failed to open external link, window may be blocked:', url);\n      if (fallbackToCurrentWindow) {\n        window.location.href = url;\n      }\n      return null;\n    }\n  } catch (error) {\n    console.error('Error opening external link:', error);\n    if (fallbackToCurrentWindow) {\n      try {\n        window.location.href = url;\n      } catch (fallbackError) {\n        console.error('Fallback navigation also failed:', fallbackError);\n      }\n    }\n    return null;\n  }\n}\n\n/**\n * Validates and sanitizes image sources to prevent XSS\n * @param {string} imageSrc - The image source URL\n * @returns {string|null} - Sanitized URL or null if invalid\n */\nexport function sanitizeImageSrc(imageSrc) {\n  if (!imageSrc || typeof imageSrc !== 'string') {\n    return null;\n  }\n\n  // Basic whitelist for allowed protocols\n  const allowedProtocols = ['http:', 'https:', 'data:'];\n  try {\n    const url = new URL(imageSrc, window.location.origin);\n    if (allowedProtocols.includes(url.protocol)) {\n      return url.href;\n    } else {\n      console.warn('Disallowed protocol in image URL:', imageSrc);\n      return null;\n    }\n  } catch (error) {\n    // If URL parsing fails, it might be a relative URL\n    if (imageSrc.startsWith('/') || imageSrc.startsWith('./') || imageSrc.startsWith('../')) {\n      return imageSrc; // Allow relative URLs\n    }\n    console.warn('Invalid image URL:', imageSrc);\n    return null;\n  }\n}\n\n/**\n * Debounces a function call\n * @param {Function} func - Function to debounce\n * @param {number} wait - Wait time in milliseconds\n * @param {boolean} immediate - Whether to execute immediately\n * @returns {Function} - Debounced function\n */\nexport function debounce(func, wait, immediate = false) {\n  let timeout;\n  return function executedFunction(...args) {\n    const later = () => {\n      timeout = null;\n      if (!immediate) func(...args);\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func(...args);\n  };\n}","map":{"version":3,"names":["clsx","twMerge","cn","inputs","formatPrice","amount","currency","Intl","NumberFormat","style","format","createScrollObserver","callback","options","defaultOptions","root","rootMargin","threshold","mergedOptions","IntersectionObserver","openExternalLink","url","fallbackToCurrentWindow","console","error","newWindow","window","open","opener","warn","location","href","fallbackError","sanitizeImageSrc","imageSrc","allowedProtocols","URL","origin","includes","protocol","startsWith","debounce","func","wait","immediate","timeout","executedFunction","args","later","callNow","clearTimeout","setTimeout"],"sources":["/Users/karthi/Desktop/Myna Kitchen/myna/src/lib/utils.js"],"sourcesContent":["import { clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Combines multiple class name utilities and resolves Tailwind CSS conflicts\n * @param  {...any} inputs - CSS class names or conditional class name objects\n * @returns {string} - Merged class string with conflicts resolved\n */\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Format price as currency string\n * @param {number} amount - Amount to format\n * @param {string} currency - Currency code (default: 'INR')\n * @returns {string} - Formatted price string\n */\nexport function formatPrice(amount, currency = 'INR') {\n  return new Intl.NumberFormat('en-IN', {\n    style: 'currency',\n    currency,\n  }).format(amount);\n}\n\n/**\n * Adds an intersection observer to animate elements as they enter viewport\n * @param {function} callback - Function to call when element is observed\n * @param {Object} options - IntersectionObserver options\n * @returns {IntersectionObserver} - The created observer instance\n */\nexport function createScrollObserver(callback, options = {}) {\n  const defaultOptions = {\n    root: null,\n    rootMargin: '0px',\n    threshold: 0.1,\n  };\n  \n  const mergedOptions = { ...defaultOptions, ...options };\n  \n  return new IntersectionObserver(callback, mergedOptions);\n}\n\n/**\n * Safely opens external links with proper security measures\n * Prevents tabnabbing attacks and handles errors gracefully\n * @param {string} url - The URL to open\n * @param {Object} options - Additional options\n * @param {boolean} options.fallbackToCurrentWindow - Whether to fallback to current window on error\n * @returns {Window|null} - The opened window reference or null\n */\nexport function openExternalLink(url, options = {}) {\n  const { fallbackToCurrentWindow = true } = options;\n  \n  try {\n    // Validate URL\n    if (!url || typeof url !== 'string') {\n      console.error('Invalid URL provided to openExternalLink:', url);\n      return null;\n    }\n\n    // Open with security attributes\n    const newWindow = window.open(url, '_blank', 'noopener,noreferrer');\n    \n    if (newWindow) {\n      // Extra security measure\n      newWindow.opener = null;\n      return newWindow;\n    } else {\n      // Window was blocked or failed to open\n      console.warn('Failed to open external link, window may be blocked:', url);\n      \n      if (fallbackToCurrentWindow) {\n        window.location.href = url;\n      }\n      return null;\n    }\n  } catch (error) {\n    console.error('Error opening external link:', error);\n    \n    if (fallbackToCurrentWindow) {\n      try {\n        window.location.href = url;\n      } catch (fallbackError) {\n        console.error('Fallback navigation also failed:', fallbackError);\n      }\n    }\n    return null;\n  }\n}\n\n/**\n * Validates and sanitizes image sources to prevent XSS\n * @param {string} imageSrc - The image source URL\n * @returns {string|null} - Sanitized URL or null if invalid\n */\nexport function sanitizeImageSrc(imageSrc) {\n  if (!imageSrc || typeof imageSrc !== 'string') {\n    return null;\n  }\n\n  // Basic whitelist for allowed protocols\n  const allowedProtocols = ['http:', 'https:', 'data:'];\n  \n  try {\n    const url = new URL(imageSrc, window.location.origin);\n    \n    if (allowedProtocols.includes(url.protocol)) {\n      return url.href;\n    } else {\n      console.warn('Disallowed protocol in image URL:', imageSrc);\n      return null;\n    }\n  } catch (error) {\n    // If URL parsing fails, it might be a relative URL\n    if (imageSrc.startsWith('/') || imageSrc.startsWith('./') || imageSrc.startsWith('../')) {\n      return imageSrc; // Allow relative URLs\n    }\n    \n    console.warn('Invalid image URL:', imageSrc);\n    return null;\n  }\n}\n\n/**\n * Debounces a function call\n * @param {Function} func - Function to debounce\n * @param {number} wait - Wait time in milliseconds\n * @param {boolean} immediate - Whether to execute immediately\n * @returns {Function} - Debounced function\n */\nexport function debounce(func, wait, immediate = false) {\n  let timeout;\n  \n  return function executedFunction(...args) {\n    const later = () => {\n      timeout = null;\n      if (!immediate) func(...args);\n    };\n    \n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    \n    if (callNow) func(...args);\n  };\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}