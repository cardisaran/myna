{"ast":null,"code":"import { clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Combines multiple class name utilities and resolves Tailwind CSS conflicts\n * @param  {...any} inputs - CSS class names or conditional class name objects\n * @returns {string} - Merged class string with conflicts resolved\n */\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Format price as currency string\n * @param {number} amount - Amount to format\n * @param {string} currency - Currency code (default: 'INR')\n * @returns {string} - Formatted price string\n */\nexport function formatPrice(amount, currency = 'INR') {\n  return new Intl.NumberFormat('en-IN', {\n    style: 'currency',\n    currency\n  }).format(amount);\n}\n\n/**\n * Optimized intersection observer for animations and lazy loading\n * @param {function} callback - Function to call when element is observed\n * @param {Object} options - IntersectionObserver options\n * @returns {IntersectionObserver} - The created observer instance\n */\nexport function createScrollObserver(callback, options = {}) {\n  const defaultOptions = {\n    root: null,\n    rootMargin: '0px',\n    threshold: 0.1\n  };\n  const mergedOptions = {\n    ...defaultOptions,\n    ...options\n  };\n  return new IntersectionObserver(callback, mergedOptions);\n}\n\n/**\n * Lazy load images with performance optimization\n * @param {string} selector - CSS selector for images to lazy load\n * @param {Object} options - Options for lazy loading\n */\nexport function initLazyLoading(selector = 'img[data-src]', options = {}) {\n  const lazyImages = document.querySelectorAll(selector);\n  if ('IntersectionObserver' in window) {\n    const imageObserver = new IntersectionObserver((entries, observer) => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          const img = entry.target;\n          const src = img.dataset.src;\n          if (src) {\n            // Add loading state\n            img.classList.add('loading');\n\n            // Create new image to preload\n            const imageLoader = new Image();\n            imageLoader.onload = () => {\n              img.src = src;\n              img.classList.remove('loading');\n              img.classList.add('loaded');\n              img.removeAttribute('data-src');\n            };\n            imageLoader.onerror = () => {\n              img.classList.remove('loading');\n              img.classList.add('error');\n            };\n            imageLoader.src = src;\n          }\n          observer.unobserve(img);\n        }\n      });\n    }, {\n      rootMargin: '50px 0px',\n      threshold: 0.01\n    });\n    lazyImages.forEach(img => imageObserver.observe(img));\n  } else {\n    // Fallback for older browsers\n    lazyImages.forEach(img => {\n      if (img.dataset.src) {\n        img.src = img.dataset.src;\n        img.removeAttribute('data-src');\n      }\n    });\n  }\n}\n\n/**\n * Optimize will-change properties for better performance\n * @param {HTMLElement} element - Element to optimize\n * @param {number} duration - Duration after which to reset will-change\n */\nexport function optimizeWillChange(element, duration = 1000) {\n  if (element && element.style) {\n    setTimeout(() => {\n      element.style.willChange = 'auto';\n    }, duration);\n  }\n}\n\n/**\n * Debounce function for performance optimization\n * @param {function} func - Function to debounce\n * @param {number} wait - Wait time in milliseconds\n * @param {boolean} immediate - Whether to execute immediately\n * @returns {function} - Debounced function\n */\nexport function debounce(func, wait, immediate) {\n  let timeout;\n  return function executedFunction(...args) {\n    const later = () => {\n      timeout = null;\n      if (!immediate) func(...args);\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func(...args);\n  };\n}\n\n/**\n * Throttle function for performance optimization\n * @param {function} func - Function to throttle\n * @param {number} limit - Time limit in milliseconds\n * @returns {function} - Throttled function\n */\nexport function throttle(func, limit) {\n  let inThrottle;\n  return function (...args) {\n    if (!inThrottle) {\n      func.apply(this, args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n}\n\n/**\n * Check if device prefers reduced motion\n * @returns {boolean} - Whether reduced motion is preferred\n */\nexport function prefersReducedMotion() {\n  return window.matchMedia && window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n}\n\n/**\n * Get optimized animation duration based on user preferences\n * @param {number} defaultDuration - Default animation duration in ms\n * @returns {number} - Optimized duration\n */\nexport function getOptimizedDuration(defaultDuration) {\n  return prefersReducedMotion() ? 0 : defaultDuration;\n}\n\n/**\n * Performance monitor for development\n */\nexport class PerformanceMonitor {\n  constructor() {\n    this.metrics = {\n      fps: 0,\n      frameCount: 0,\n      lastTime: performance.now()\n    };\n    this.isMonitoring = false;\n  }\n  start() {\n    if (this.isMonitoring) return;\n    this.isMonitoring = true;\n    this.monitor();\n  }\n  stop() {\n    this.isMonitoring = false;\n  }\n  monitor() {\n    if (!this.isMonitoring) return;\n    this.metrics.frameCount++;\n    const currentTime = performance.now();\n    if (currentTime - this.metrics.lastTime >= 1000) {\n      this.metrics.fps = Math.round(this.metrics.frameCount * 1000 / (currentTime - this.metrics.lastTime));\n      if (this.metrics.fps < 50 && process.env.NODE_ENV === 'development') {\n        console.warn(`Performance Warning: Low FPS detected: ${this.metrics.fps}fps`);\n      }\n      this.metrics.frameCount = 0;\n      this.metrics.lastTime = currentTime;\n    }\n    requestAnimationFrame(() => this.monitor());\n  }\n  getFPS() {\n    return this.metrics.fps;\n  }\n}\n\n/**\n * Clean up animations and reset performance-related properties\n * @param {NodeList|Array} elements - Elements to clean up\n */\nexport function cleanupAnimations(elements) {\n  elements.forEach(element => {\n    if (element && element.style) {\n      element.style.willChange = 'auto';\n      element.style.transform = '';\n      element.style.transition = '';\n    }\n  });\n}","map":{"version":3,"names":["clsx","twMerge","cn","inputs","formatPrice","amount","currency","Intl","NumberFormat","style","format","createScrollObserver","callback","options","defaultOptions","root","rootMargin","threshold","mergedOptions","IntersectionObserver","initLazyLoading","selector","lazyImages","document","querySelectorAll","window","imageObserver","entries","observer","forEach","entry","isIntersecting","img","target","src","dataset","classList","add","imageLoader","Image","onload","remove","removeAttribute","onerror","unobserve","observe","optimizeWillChange","element","duration","setTimeout","willChange","debounce","func","wait","immediate","timeout","executedFunction","args","later","callNow","clearTimeout","throttle","limit","inThrottle","apply","prefersReducedMotion","matchMedia","matches","getOptimizedDuration","defaultDuration","PerformanceMonitor","constructor","metrics","fps","frameCount","lastTime","performance","now","isMonitoring","start","monitor","stop","currentTime","Math","round","process","env","NODE_ENV","console","warn","requestAnimationFrame","getFPS","cleanupAnimations","elements","transform","transition"],"sources":["/Users/karthi/Desktop/Myna Kitchen/myna/src/lib/utils.js"],"sourcesContent":["import { clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Combines multiple class name utilities and resolves Tailwind CSS conflicts\n * @param  {...any} inputs - CSS class names or conditional class name objects\n * @returns {string} - Merged class string with conflicts resolved\n */\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Format price as currency string\n * @param {number} amount - Amount to format\n * @param {string} currency - Currency code (default: 'INR')\n * @returns {string} - Formatted price string\n */\nexport function formatPrice(amount, currency = 'INR') {\n  return new Intl.NumberFormat('en-IN', {\n    style: 'currency',\n    currency,\n  }).format(amount);\n}\n\n/**\n * Optimized intersection observer for animations and lazy loading\n * @param {function} callback - Function to call when element is observed\n * @param {Object} options - IntersectionObserver options\n * @returns {IntersectionObserver} - The created observer instance\n */\nexport function createScrollObserver(callback, options = {}) {\n  const defaultOptions = {\n    root: null,\n    rootMargin: '0px',\n    threshold: 0.1,\n  };\n  \n  const mergedOptions = { ...defaultOptions, ...options };\n  \n  return new IntersectionObserver(callback, mergedOptions);\n}\n\n/**\n * Lazy load images with performance optimization\n * @param {string} selector - CSS selector for images to lazy load\n * @param {Object} options - Options for lazy loading\n */\nexport function initLazyLoading(selector = 'img[data-src]', options = {}) {\n  const lazyImages = document.querySelectorAll(selector);\n  \n  if ('IntersectionObserver' in window) {\n    const imageObserver = new IntersectionObserver((entries, observer) => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          const img = entry.target;\n          const src = img.dataset.src;\n          \n          if (src) {\n            // Add loading state\n            img.classList.add('loading');\n            \n            // Create new image to preload\n            const imageLoader = new Image();\n            imageLoader.onload = () => {\n              img.src = src;\n              img.classList.remove('loading');\n              img.classList.add('loaded');\n              img.removeAttribute('data-src');\n            };\n            imageLoader.onerror = () => {\n              img.classList.remove('loading');\n              img.classList.add('error');\n            };\n            imageLoader.src = src;\n          }\n          \n          observer.unobserve(img);\n        }\n      });\n    }, {\n      rootMargin: '50px 0px',\n      threshold: 0.01\n    });\n\n    lazyImages.forEach(img => imageObserver.observe(img));\n  } else {\n    // Fallback for older browsers\n    lazyImages.forEach(img => {\n      if (img.dataset.src) {\n        img.src = img.dataset.src;\n        img.removeAttribute('data-src');\n      }\n    });\n  }\n}\n\n/**\n * Optimize will-change properties for better performance\n * @param {HTMLElement} element - Element to optimize\n * @param {number} duration - Duration after which to reset will-change\n */\nexport function optimizeWillChange(element, duration = 1000) {\n  if (element && element.style) {\n    setTimeout(() => {\n      element.style.willChange = 'auto';\n    }, duration);\n  }\n}\n\n/**\n * Debounce function for performance optimization\n * @param {function} func - Function to debounce\n * @param {number} wait - Wait time in milliseconds\n * @param {boolean} immediate - Whether to execute immediately\n * @returns {function} - Debounced function\n */\nexport function debounce(func, wait, immediate) {\n  let timeout;\n  return function executedFunction(...args) {\n    const later = () => {\n      timeout = null;\n      if (!immediate) func(...args);\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func(...args);\n  };\n}\n\n/**\n * Throttle function for performance optimization\n * @param {function} func - Function to throttle\n * @param {number} limit - Time limit in milliseconds\n * @returns {function} - Throttled function\n */\nexport function throttle(func, limit) {\n  let inThrottle;\n  return function(...args) {\n    if (!inThrottle) {\n      func.apply(this, args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n}\n\n/**\n * Check if device prefers reduced motion\n * @returns {boolean} - Whether reduced motion is preferred\n */\nexport function prefersReducedMotion() {\n  return window.matchMedia && window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n}\n\n/**\n * Get optimized animation duration based on user preferences\n * @param {number} defaultDuration - Default animation duration in ms\n * @returns {number} - Optimized duration\n */\nexport function getOptimizedDuration(defaultDuration) {\n  return prefersReducedMotion() ? 0 : defaultDuration;\n}\n\n/**\n * Performance monitor for development\n */\nexport class PerformanceMonitor {\n  constructor() {\n    this.metrics = {\n      fps: 0,\n      frameCount: 0,\n      lastTime: performance.now()\n    };\n    this.isMonitoring = false;\n  }\n\n  start() {\n    if (this.isMonitoring) return;\n    this.isMonitoring = true;\n    this.monitor();\n  }\n\n  stop() {\n    this.isMonitoring = false;\n  }\n\n  monitor() {\n    if (!this.isMonitoring) return;\n\n    this.metrics.frameCount++;\n    const currentTime = performance.now();\n    \n    if (currentTime - this.metrics.lastTime >= 1000) {\n      this.metrics.fps = Math.round((this.metrics.frameCount * 1000) / (currentTime - this.metrics.lastTime));\n      \n      if (this.metrics.fps < 50 && process.env.NODE_ENV === 'development') {\n        console.warn(`Performance Warning: Low FPS detected: ${this.metrics.fps}fps`);\n      }\n      \n      this.metrics.frameCount = 0;\n      this.metrics.lastTime = currentTime;\n    }\n    \n    requestAnimationFrame(() => this.monitor());\n  }\n\n  getFPS() {\n    return this.metrics.fps;\n  }\n}\n\n/**\n * Clean up animations and reset performance-related properties\n * @param {NodeList|Array} elements - Elements to clean up\n */\nexport function cleanupAnimations(elements) {\n  elements.forEach(element => {\n    if (element && element.style) {\n      element.style.willChange = 'auto';\n      element.style.transform = '';\n      element.style.transition = '';\n    }\n  });\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}